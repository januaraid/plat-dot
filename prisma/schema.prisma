generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String?
  image            String?
  subscriptionTier String    @default("free")
  aiUsageCount     Int       @default(0)
  aiUsageLimit     Int       @default(20)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  folders          Folder[]
  items            Item[]

  @@map("users")
}


model Folder {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  parent      Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[] @relation("FolderHierarchy")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       Item[]

  @@unique([userId, name, parentId])
  @@map("folders")
}

model Item {
  id               String         @id @default(cuid())
  name             String
  description      String?
  category         String?
  purchaseDate     DateTime?
  purchasePrice    Decimal?
  purchaseLocation String?
  condition        String?
  notes            String?
  folderId         String?
  userId           String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  images           ItemImage[]
  folder           Folder?        @relation(fields: [folderId], references: [id])
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  priceHistory     PriceHistory[]

  @@index([userId])
  @@index([userId, name])
  @@index([userId, category])
  @@index([userId, folderId])
  @@index([userId, createdAt])
  @@index([userId, updatedAt])
  @@map("items")
}

model ItemImage {
  id       String @id @default(cuid())
  url      String
  filename String
  mimeType String
  size     Int
  order    Int    @default(0)
  itemId   String
  item     Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([itemId, order])
  @@map("item_images")
}

model PriceHistory {
  id           String   @id @default(cuid())
  itemId       String
  searchDate   DateTime @default(now())
  source       String
  minPrice     Decimal?
  avgPrice     Decimal?
  maxPrice     Decimal?
  listingCount Int      @default(0)
  searchQuery  String?
  isActive     Boolean  @default(true)
  item         Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("price_history")
}
