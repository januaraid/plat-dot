generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(cuid())
  email            String       @unique
  name             String?
  image            String?
  subscriptionTier String       @default("free")
  aiUsageCount     Int          @default(0)
  aiUsageLimit     Int          @default(20)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  folders          Folder[]
  items            Item[]
  aiUsageLogs      AiUsageLog[]

  @@map("users")
}


model Folder {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  parent      Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[] @relation("FolderHierarchy")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       Item[]

  @@unique([userId, name, parentId])
  @@map("folders")
}

model Item {
  id               String         @id @default(cuid())
  name             String
  description      String?
  category         String?
  manufacturer     String?
  purchaseDate     DateTime?
  purchasePrice    Decimal?
  purchaseLocation String?
  condition        String?
  notes            String?
  folderId         String?
  userId           String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  images           ItemImage[]
  folder           Folder?        @relation(fields: [folderId], references: [id])
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  priceHistory     PriceHistory[]
  aiUsageLogs      AiUsageLog[]

  @@index([userId])
  @@index([userId, name])
  @@index([userId, category])
  @@index([userId, manufacturer])
  @@index([userId, folderId])
  @@index([userId, createdAt])
  @@index([userId, updatedAt])
  @@map("items")
}

model ItemImage {
  id       String @id @default(cuid())
  url      String
  filename String
  mimeType String
  size     Int
  order    Int    @default(0)
  itemId   String
  item     Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([itemId, order])
  @@map("item_images")
}

model PriceHistory {
  id           String              @id @default(cuid())
  itemId       String
  searchDate   DateTime            @default(now())
  source       String              // AI検索, 手動入力など
  minPrice     Decimal?
  avgPrice     Decimal?
  maxPrice     Decimal?
  listingCount Int                 @default(0)
  searchQuery  String?
  summary      String?             // AI価格調査のサマリー
  isActive     Boolean             @default(true)
  item         Item                @relation(fields: [itemId], references: [id], onDelete: Cascade)
  priceDetails PriceHistoryDetail[]

  @@index([itemId, searchDate])
  @@map("price_history")
}

model PriceHistoryDetail {
  id              String       @id @default(cuid())
  priceHistoryId  String
  site            String       // メルカリ, ヤフオク等
  price           String       // 価格文字列（¥1,500など）
  url             String?      // 商品ページURL
  condition       String?      // 商品状態
  title           String?      // 商品タイトル
  createdAt       DateTime     @default(now())
  priceHistory    PriceHistory @relation(fields: [priceHistoryId], references: [id], onDelete: Cascade)

  @@map("price_history_details")
}

model AiUsageLog {
  id        String   @id @default(cuid())
  userId    String
  type      String   // 'image_recognition', 'price_search'
  itemId    String?  // 関連アイテム（あれば）
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      Item?    @relation(fields: [itemId], references: [id], onDelete: SetNull)

  @@index([userId, type, createdAt])
  @@map("ai_usage_logs")
}
